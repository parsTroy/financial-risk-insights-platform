name: Test CI Configuration

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - backend
        - frontend
        - python
        - cpp

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'backend'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Test backend build
      run: |
        echo "üî® Testing Backend Build..."
        cd backend
        dotnet restore FinancialRisk.sln
        dotnet build FinancialRisk.sln --configuration Release
        echo "‚úÖ Backend build successful"

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'frontend'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Test frontend build
      run: |
        echo "üé® Testing Frontend Build..."
        cd frontend/FinancialRisk.Frontend
        dotnet restore
        dotnet build --configuration Release
        echo "‚úÖ Frontend build successful"

  test-python:
    name: Test Python Models
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'python'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy scipy pandas psutil

    - name: Test Python models
      run: |
        echo "üêç Testing Python Models..."
        cd backend/FinancialRisk.Api/Services
        
        # Test Monte Carlo engine
        python3 -c "
        from monte_carlo_engine import MonteCarloVaRCalculator
        print('‚úÖ Monte Carlo engine imported')
        "
        
        # Test Portfolio optimizer
        python3 -c "
        from portfolio_optimizer import PortfolioOptimizer
        print('‚úÖ Portfolio optimizer imported')
        "
        
        # Test Quant models
        python3 -c "
        from python_models.quant_models import QuantModelRegistry
        print('‚úÖ Quant models imported')
        "
        
        echo "‚úÖ Python models test successful"

  test-cpp:
    name: Test C++ Models
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'cpp'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup C++ build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Test C++ models
      run: |
        echo "‚öôÔ∏è Testing C++ Models..."
        cd backend/FinancialRisk.Api/Services
        
        # Check source files
        if [ -f "MonteCarloEngine.cpp" ] && [ -f "MonteCarloEngine.h" ]; then
          echo "‚úÖ Monte Carlo C++ source files found"
        fi
        
        if [ -f "QuantEngine.cpp" ] && [ -f "QuantEngine.h" ]; then
          echo "‚úÖ Quant Engine C++ source files found"
        fi
        
        if [ -f "CMakeLists.txt" ]; then
          echo "‚úÖ CMakeLists.txt found"
        fi
        
        echo "‚úÖ C++ models test successful"

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-python, test-cpp]
    if: always()

    steps:
    - name: Generate test summary
      run: |
        echo "üéâ === CI Configuration Test Summary ==="
        echo ""
        echo "‚úÖ Backend Test: ${{ needs.test-backend.result }}"
        echo "‚úÖ Frontend Test: ${{ needs.test-frontend.result }}"
        echo "‚úÖ Python Test: ${{ needs.test-python.result }}"
        echo "‚úÖ C++ Test: ${{ needs.test-cpp.result }}"
        echo ""
        echo "üöÄ CI configuration is working correctly!"
        echo ""
        echo "üìã Next Steps:"
        echo "1. Deploy to Railway for production"
        echo "2. Configure Railway services"
        echo "3. Test full deployment"
