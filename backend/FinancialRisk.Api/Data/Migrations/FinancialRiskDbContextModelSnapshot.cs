// <auto-generated />
using System;
using FinancialRisk.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FinancialRisk.Api.Data.Migrations
{
    [DbContext(typeof(FinancialRiskDbContext))]
    partial class FinancialRiskDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FinancialRisk.Api.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssetType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("assettype");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("Industry")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("industry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Sector")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sector");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("symbol");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedat");

                    b.HasKey("Id");

                    b.HasIndex("AssetType")
                        .HasDatabaseName("ix_assets_assettype");

                    b.HasIndex("Sector")
                        .HasDatabaseName("ix_assets_sector");

                    b.HasIndex("Symbol")
                        .IsUnique()
                        .HasDatabaseName("ix_assets_symbol");

                    b.ToTable("assets", (string)null);
                });

            modelBuilder.Entity("FinancialRisk.Api.Models.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<decimal?>("MaxRisk")
                        .HasColumnType("NUMERIC(18,6)")
                        .HasColumnName("maxrisk");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Strategy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("strategy");

                    b.Property<decimal?>("TargetReturn")
                        .HasColumnType("NUMERIC(18,6)")
                        .HasColumnName("targetreturn");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedat");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_portfolios_isactive");

                    b.HasIndex("Strategy")
                        .HasDatabaseName("ix_portfolios_strategy");

                    b.ToTable("portfolios", (string)null);
                });

            modelBuilder.Entity("FinancialRisk.Api.Models.PortfolioHolding", b =>
                {
                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portfolioid");

                    b.Property<int>("AssetId")
                        .HasColumnType("integer")
                        .HasColumnName("assetid");

                    b.Property<decimal?>("AverageCost")
                        .HasColumnType("NUMERIC(18,6)")
                        .HasColumnName("averagecost");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("NUMERIC(18,6)")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedat");

                    b.Property<decimal>("Weight")
                        .HasColumnType("NUMERIC(18,6)")
                        .HasColumnName("weight");

                    b.HasKey("PortfolioId", "AssetId");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_portfolioholdings_assetid");

                    b.ToTable("portfolioholdings", (string)null);
                });

            modelBuilder.Entity("FinancialRisk.Api.Models.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AdjustedClose")
                        .HasColumnType("NUMERIC(18,6)")
                        .HasColumnName("adjustedclose");

                    b.Property<int>("AssetId")
                        .HasColumnType("integer")
                        .HasColumnName("assetid");

                    b.Property<decimal?>("Close")
                        .HasColumnType("NUMERIC(18,6)")
                        .HasColumnName("close");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<decimal?>("High")
                        .HasColumnType("NUMERIC(18,6)")
                        .HasColumnName("high");

                    b.Property<decimal?>("Low")
                        .HasColumnType("NUMERIC(18,6)")
                        .HasColumnName("low");

                    b.Property<decimal?>("Open")
                        .HasColumnType("NUMERIC(18,6)")
                        .HasColumnName("open");

                    b.Property<long?>("Volume")
                        .HasColumnType("BIGINT")
                        .HasColumnName("volume");

                    b.HasKey("Id");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_prices_assetid");

                    b.HasIndex("Date")
                        .HasDatabaseName("ix_prices_date");

                    b.HasIndex("AssetId", "Date")
                        .IsUnique()
                        .HasDatabaseName("ix_prices_assetid_date");

                    b.ToTable("prices", (string)null);
                });

            modelBuilder.Entity("FinancialRisk.Api.Models.PortfolioHolding", b =>
                {
                    b.HasOne("FinancialRisk.Api.Models.Asset", "Asset")
                        .WithMany("PortfolioHoldings")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinancialRisk.Api.Models.Portfolio", "Portfolio")
                        .WithMany("PortfolioHoldings")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("FinancialRisk.Api.Models.Price", b =>
                {
                    b.HasOne("FinancialRisk.Api.Models.Asset", "Asset")
                        .WithMany("Prices")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("FinancialRisk.Api.Models.Asset", b =>
                {
                    b.Navigation("PortfolioHoldings");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("FinancialRisk.Api.Models.Portfolio", b =>
                {
                    b.Navigation("PortfolioHoldings");
                });
#pragma warning restore 612, 618
        }
    }
}
