@page "/portfolio-optimization"

<PageTitle>Portfolio Optimization</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    <!-- Header -->
    <MudText Typo="Typo.h4" Class="mb-4">Portfolio Optimization</MudText>
    <MudText Typo="Typo.body1" Class="mb-6" Style="opacity: 0.7;">
        Advanced optimization algorithms for portfolio allocation and rebalancing
    </MudText>

    <!-- Optimization Parameters -->
    <MudPaper Class="pa-4 mb-6" Elevation="1">
        <MudText Typo="Typo.h6" Class="mb-4">Optimization Parameters</MudText>
        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="symbols" 
                             Label="Stock Symbols" 
                             Variant="Variant.Outlined" 
                             Placeholder="e.g., AAPL,MSFT,GOOGL"
                             HelperText="Comma-separated list of symbols" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudSelect @bind-Value="optimizationMethod" 
                          Label="Optimization Method" 
                          Variant="Variant.Outlined"
                          T="string">
                    <MudSelectItem Value="@("MeanVariance")">Mean-Variance</MudSelectItem>
                    <MudSelectItem Value="@("MinimumVariance")">Minimum Variance</MudSelectItem>
                    <MudSelectItem Value="@("MaximumSharpe")">Maximum Sharpe</MudSelectItem>
                    <MudSelectItem Value="@("EqualWeight")">Equal Weight</MudSelectItem>
                    <MudSelectItem Value="@("RiskParity")">Risk Parity</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="targetReturn" 
                             Label="Target Return (%)" 
                             Variant="Variant.Outlined" 
                             InputType="InputType.Number" />
            </MudItem>
        </MudGrid>

        <MudButton Variant="Variant.Filled" 
                  Color="Color.Primary" 
                  StartIcon="Icons.Material.Filled.Optimize"
                  OnClick="OptimizePortfolio"
                  Disabled="isLoading"
                  Class="mt-4">
            @if (isLoading)
            {
                <MudProgressCircular Class="ms-n1" Color="Color.Inherit" Indeterminate="true" Size="Size.Small" />
                <MudText Class="ms-2">Optimizing...</MudText>
            }
            else
            {
                <MudText>Optimize Portfolio</MudText>
            }
        </MudButton>
    </MudPaper>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mb-4" ShowCloseIcon="true" CloseIconClicked="() => errorMessage = string.Empty">
            @errorMessage
        </MudAlert>
    }

    @if (optimizationResult != null)
    {
        <!-- Optimization Results -->
        <MudGrid Class="mb-6">
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2" Class="pa-4 text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.TrendingUp" Color="Color.Success" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h6" Class="mb-1">Expected Return</MudText>
                        <MudText Typo="Typo.h4" Color="Color.Success">@(optimizationResult.ExpectedReturn.ToString("P2"))</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2" Class="pa-4 text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.TrendingDown" Color="Color.Error" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h6" Class="mb-1">Volatility</MudText>
                        <MudText Typo="Typo.h4" Color="Color.Error">@(optimizationResult.Volatility.ToString("P2"))</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2" Class="pa-4 text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.SignalCellularAlt" Color="Color.Info" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h6" Class="mb-1">Sharpe Ratio</MudText>
                        <MudText Typo="Typo.h4" Color="Color.Info">@(optimizationResult.SharpeRatio.ToString("F2"))</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2" Class="pa-4 text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.PieChart" Color="Color.Warning" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h6" Class="mb-1">Diversification</MudText>
                        <MudText Typo="Typo.h4" Color="Color.Warning">@(optimizationResult.DiversificationRatio.ToString("F2"))</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Optimal Weights -->
        <MudPaper Class="pa-4" Elevation="1">
            <MudText Typo="Typo.h6" Class="mb-4">Optimal Asset Weights</MudText>
            <MudTable Items="optimizationResult.Weights" Hover="true" Dense="true">
                <HeaderContent>
                    <MudTh>Symbol</MudTh>
                    <MudTh>Weight</MudTh>
                    <MudTh>Expected Return</MudTh>
                    <MudTh>Risk Contribution</MudTh>
                    <MudTh>Return Contribution</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Symbol</MudTd>
                    <MudTd>@context.Weight.ToString("P2")</MudTd>
                    <MudTd>@context.ExpectedReturn.ToString("P2")</MudTd>
                    <MudTd>@context.RiskContribution.ToString("P2")</MudTd>
                    <MudTd>@context.ReturnContribution.ToString("P2")</MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    }
</MudContainer>

@code {
    private string symbols = "AAPL,MSFT,GOOGL";
    private string optimizationMethod = "MeanVariance";
    private double targetReturn = 10;
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private PortfolioOptimizationResult? optimizationResult;

    private async Task OptimizePortfolio()
    {
        if (string.IsNullOrWhiteSpace(symbols))
        {
            errorMessage = "Please enter stock symbols";
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var symbolList = symbols.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                  .Select(s => s.Trim().ToUpper())
                                  .ToList();

            if (symbolList.Count < 2)
            {
                errorMessage = "Please enter at least 2 stock symbols";
                return;
            }

            // Simulate calculation
            await Task.Delay(2000);
            
            optimizationResult = CreateMockOptimizationResult(symbolList);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error optimizing portfolio: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private PortfolioOptimizationResult CreateMockOptimizationResult(List<string> symbols)
    {
        var random = new Random();
        var weights = symbols.Select(s => new AssetWeight(
            s,
            1.0 / symbols.Count + (random.NextDouble() - 0.5) * 0.1,
            0.08 + random.NextDouble() * 0.1,
            0.1 + random.NextDouble() * 0.1,
            0.05 + random.NextDouble() * 0.05
        )).ToList();

        // Normalize weights
        var totalWeight = weights.Sum(w => w.Weight);
        var normalizedWeights = weights.Select(w => new AssetWeight(
            w.Symbol,
            w.Weight / totalWeight,
            w.ExpectedReturn,
            w.RiskContribution,
            w.ReturnContribution
        )).ToList();

        return new PortfolioOptimizationResult(
            0.12 + random.NextDouble() * 0.05,
            0.15 + random.NextDouble() * 0.1,
            0.8 + random.NextDouble() * 0.4,
            1.2 + random.NextDouble() * 0.3,
            normalizedWeights
        );
    }

    protected override void OnInitialized()
    {
        targetReturn = 10;
    }

    private record PortfolioOptimizationResult(
        double ExpectedReturn, 
        double Volatility, 
        double SharpeRatio, 
        double DiversificationRatio, 
        List<AssetWeight> Weights
    );
    private record AssetWeight(
        string Symbol, 
        double Weight, 
        double ExpectedReturn, 
        double RiskContribution, 
        double ReturnContribution
    );
}