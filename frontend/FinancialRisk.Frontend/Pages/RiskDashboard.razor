@page "/risk-dashboard"

<PageTitle>Risk Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    <!-- Header -->
    <MudText Typo="Typo.h4" Class="mb-4">Risk Dashboard</MudText>
    <MudText Typo="Typo.body1" Class="mb-6" Style="opacity: 0.7;">
        Comprehensive risk analysis and portfolio monitoring
    </MudText>

    <!-- Input Section -->
    <MudPaper Class="pa-4 mb-6" Elevation="1">
        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="symbol" 
                             Label="Stock Symbol" 
                             Variant="Variant.Outlined" 
                             Placeholder="e.g., AAPL, MSFT, GOOGL"
                             Adornment="Adornment.Start"
                             AdornmentIcon="Icons.Material.Filled.Search" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudSelect @bind-Value="selectedDays" 
                          Label="Time Period" 
                          Variant="Variant.Outlined"
                          T="int">
                    <MudSelectItem Value="30">30 Days</MudSelectItem>
                    <MudSelectItem Value="90">90 Days</MudSelectItem>
                    <MudSelectItem Value="252">1 Year</MudSelectItem>
                    <MudSelectItem Value="504">2 Years</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="4" Class="d-flex align-center">
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          StartIcon="Icons.Material.Filled.Analytics"
                          OnClick="CalculateRiskMetrics"
                          Disabled="isLoading"
                          Class="mr-3">
                    @if (isLoading)
                    {
                        <MudProgressCircular Class="ms-n1" Color="Color.Inherit" Indeterminate="true" Size="Size.Small" />
                        <MudText Class="ms-2">Calculating...</MudText>
                    }
                    else
                    {
                        <MudText>Calculate Risk</MudText>
                    }
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mb-4" ShowCloseIcon="true" CloseIconClicked="() => errorMessage = string.Empty">
            @errorMessage
        </MudAlert>
    }

    @if (riskMetrics != null)
    {
        <!-- Risk Metrics Cards -->
        <MudGrid Class="mb-6">
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2" Class="pa-4 text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.TrendingDown" Color="Color.Error" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h6" Class="mb-1">Volatility</MudText>
                        <MudText Typo="Typo.h4" Color="Color.Error">@(riskMetrics.Volatility.ToString("P2"))</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2" Class="pa-4 text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.TrendingUp" Color="Color.Success" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h6" Class="mb-1">Sharpe Ratio</MudText>
                        <MudText Typo="Typo.h4" Color="Color.Success">@(riskMetrics.SharpeRatio.ToString("F2"))</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2" Class="pa-4 text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.Warning" Color="Color.Warning" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h6" Class="mb-1">VaR (95%)</MudText>
                        <MudText Typo="Typo.h4" Color="Color.Warning">@(riskMetrics.ValueAtRisk95.ToString("P2"))</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2" Class="pa-4 text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.SignalCellularAlt" Color="Color.Info" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h6" Class="mb-1">Max Drawdown</MudText>
                        <MudText Typo="Typo.h4" Color="Color.Info">@(riskMetrics.MaximumDrawdown.ToString("P2"))</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Detailed Metrics -->
        <MudPaper Class="pa-4" Elevation="1">
            <MudText Typo="Typo.h6" Class="mb-4">Detailed Risk Metrics</MudText>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTable Items="GetDetailedMetrics()" Hover="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Metric</MudTh>
                            <MudTh>Value</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.Metric</MudTd>
                            <MudTd>@context.Value</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.h6" Class="mb-3">Risk Assessment</MudText>
                    @if (riskMetrics.SharpeRatio > 1.0)
                    {
                        <MudChip T="string" Color="Color.Success" Size="Size.Medium" Class="mr-2 mb-2">Excellent Risk-Adjusted Returns</MudChip>
                    }
                    else if (riskMetrics.SharpeRatio > 0.5)
                    {
                        <MudChip T="string" Color="Color.Warning" Size="Size.Medium" Class="mr-2 mb-2">Moderate Risk-Adjusted Returns</MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Color="Color.Error" Size="Size.Medium" Class="mr-2 mb-2">Poor Risk-Adjusted Returns</MudChip>
                    }

                    @if (riskMetrics.Volatility < 0.15)
                    {
                        <MudChip T="string" Color="Color.Success" Size="Size.Medium" Class="mr-2 mb-2">Low Volatility</MudChip>
                    }
                    else if (riskMetrics.Volatility < 0.30)
                    {
                        <MudChip T="string" Color="Color.Warning" Size="Size.Medium" Class="mr-2 mb-2">Moderate Volatility</MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Color="Color.Error" Size="Size.Medium" Class="mr-2 mb-2">High Volatility</MudChip>
                    }
                </MudItem>
            </MudGrid>
        </MudPaper>
    }
</MudContainer>

@code {
    private string symbol = "AAPL";
    private int selectedDays = 252;
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private RiskMetrics? riskMetrics;

    private async Task CalculateRiskMetrics()
    {
        if (string.IsNullOrWhiteSpace(symbol))
        {
            errorMessage = "Please enter a stock symbol";
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            // Simulate calculation
            await Task.Delay(2000);
            
            var random = new Random();
            riskMetrics = new RiskMetrics(
                0.15 + random.NextDouble() * 0.1,
                0.5 + random.NextDouble() * 1.0,
                0.02 + random.NextDouble() * 0.03,
                0.05 + random.NextDouble() * 0.1,
                0.3 + random.NextDouble() * 0.7,
                0.03 + random.NextDouble() * 0.04,
                0.025 + random.NextDouble() * 0.035,
                0.035 + random.NextDouble() * 0.045
            );
        }
        catch (Exception ex)
        {
            errorMessage = $"Error calculating risk metrics: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private List<MetricItem> GetDetailedMetrics()
    {
        if (riskMetrics == null) return new List<MetricItem>();

        return new List<MetricItem>
        {
            new("Sortino Ratio", riskMetrics.SortinoRatio.ToString("F2")),
            new("VaR (99%)", riskMetrics.ValueAtRisk99.ToString("P2")),
            new("Expected Shortfall (95%)", riskMetrics.ExpectedShortfall95.ToString("P2")),
            new("Expected Shortfall (99%)", riskMetrics.ExpectedShortfall99.ToString("P2"))
        };
    }

    private record MetricItem(string Metric, string Value);
    private record RiskMetrics(
        double Volatility, 
        double SharpeRatio, 
        double ValueAtRisk95, 
        double MaximumDrawdown,
        double SortinoRatio,
        double ValueAtRisk99,
        double ExpectedShortfall95,
        double ExpectedShortfall99
    );
}