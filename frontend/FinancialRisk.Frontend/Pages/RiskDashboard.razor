@page "/risk-dashboard"
@using FinancialRisk.Frontend.Models
@using FinancialRisk.Frontend.Services
@inject RiskMetricsApiService RiskMetricsService
@inject ILogger<RiskDashboard> Logger

<PageTitle>Risk Dashboard</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="display-4 mb-4">Risk Dashboard</h1>
            <p class="lead">Monitor risk metrics and alerts across your portfolio.</p>
        </div>
    </div>

    <!-- Controls Section -->
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Portfolio Configuration</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="symbols" class="form-label">Asset Symbols (comma-separated)</label>
                            <InputText @bind-Value="symbolsInput" 
                                       class="form-control" 
                                       id="symbols" 
                                       placeholder="AAPL, MSFT, GOOGL, TSLA" />
                        </div>
                        <div class="col-md-3">
                            <label for="days" class="form-label">Time Period (Days)</label>
                            <InputNumber @bind-Value="timePeriod" 
                                         class="form-control" 
                                         id="days" 
                                         min="30" 
                                         max="1000" />
                        </div>
                        <div class="col-md-3 d-flex align-items-end">
                            <button class="btn btn-primary w-100" 
                                    @onclick="LoadRiskMetrics" 
                                    disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Loading...</span>
                                }
                                else
                                {
                                    <span>Load Risk Data</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Last Updated</h5>
                </div>
                <div class="card-body text-center">
                    @if (lastUpdated != DateTime.MinValue)
                    {
                        <h6 class="text-muted">@lastUpdated.ToString("MMM dd, yyyy HH:mm")</h6>
                        <small class="text-muted">@((DateTime.UtcNow - lastUpdated).TotalMinutes.ToString("F0")) minutes ago</small>
                    }
                    else
                    {
                        <h6 class="text-muted">No data loaded</h6>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Alerts Section -->
    @if (alerts.Any())
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-warning">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="card-title mb-0">
                            <i class="oi oi-warning me-2"></i>Risk Alerts (@alerts.Count)
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @foreach (var alert in alerts.Take(6))
                            {
                                <div class="col-md-6 mb-3">
                                    <div class="alert @GetAlertClass(alert.Severity) mb-0">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div>
                                                <strong>@alert.Symbol</strong> - @alert.AlertType
                                                <br>
                                                <small>@alert.Message</small>
                                            </div>
                                            <span class="badge @GetSeverityBadgeClass(alert.Severity)">@alert.Severity.ToUpper()</span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        @if (alerts.Count > 6)
                        {
                            <div class="text-center">
                                <small class="text-muted">... and @(alerts.Count - 6) more alerts</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Risk Metrics Charts Section -->
    @if (riskMetrics.Any())
    {
        <div class="row mb-4">
            <!-- Volatility Chart -->
            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Volatility Analysis</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Symbol</th>
                                        <th class="text-end">Volatility</th>
                                        <th class="text-end">Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var metric in riskMetrics.OrderByDescending(m => m.Volatility))
                                    {
                                        <tr>
                                            <td><strong>@metric.Symbol</strong></td>
                                            <td class="text-end">@metric.Volatility.ToString("P2")</td>
                                            <td class="text-end">
                                                @if (metric.Volatility > 0.3)
                                                {
                                                    <span class="badge bg-danger">High Risk</span>
                                                }
                                                else if (metric.Volatility > 0.15)
                                                {
                                                    <span class="badge bg-warning">Medium Risk</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-success">Low Risk</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sharpe Ratio Chart -->
            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Risk-Adjusted Returns (Sharpe Ratio)</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Symbol</th>
                                        <th class="text-end">Sharpe Ratio</th>
                                        <th class="text-end">Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var metric in riskMetrics.OrderByDescending(m => m.SharpeRatio))
                                    {
                                        <tr>
                                            <td><strong>@metric.Symbol</strong></td>
                                            <td class="text-end">@metric.SharpeRatio.ToString("F2")</td>
                                            <td class="text-end">
                                                @if (metric.SharpeRatio > 1.0)
                                                {
                                                    <span class="badge bg-success">Excellent</span>
                                                }
                                                else if (metric.SharpeRatio > 0.5)
                                                {
                                                    <span class="badge bg-info">Good</span>
                                                }
                                                else if (metric.SharpeRatio > 0)
                                                {
                                                    <span class="badge bg-warning">Poor</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">Negative</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- VaR Analysis Section -->
        <div class="row mb-4">
            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Value at Risk (95%)</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Symbol</th>
                                        <th class="text-end">VaR 95%</th>
                                        <th class="text-end">Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var metric in riskMetrics.OrderByDescending(m => m.ValueAtRisk95))
                                    {
                                        <tr>
                                            <td><strong>@metric.Symbol</strong></td>
                                            <td class="text-end">@metric.ValueAtRisk95.ToString("P2")</td>
                                            <td class="text-end">
                                                @if (metric.ValueAtRisk95 > 0.05)
                                                {
                                                    <span class="badge bg-danger">High Risk</span>
                                                }
                                                else if (metric.ValueAtRisk95 > 0.02)
                                                {
                                                    <span class="badge bg-warning">Medium Risk</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-success">Low Risk</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Maximum Drawdown</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Symbol</th>
                                        <th class="text-end">Max Drawdown</th>
                                        <th class="text-end">Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var metric in riskMetrics.OrderByDescending(m => m.MaximumDrawdown))
                                    {
                                        <tr>
                                            <td><strong>@metric.Symbol</strong></td>
                                            <td class="text-end">@metric.MaximumDrawdown.ToString("P2")</td>
                                            <td class="text-end">
                                                @if (metric.MaximumDrawdown > 0.2)
                                                {
                                                    <span class="badge bg-danger">High Risk</span>
                                                }
                                                else if (metric.MaximumDrawdown > 0.1)
                                                {
                                                    <span class="badge bg-warning">Medium Risk</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-success">Low Risk</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Summary Statistics -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Portfolio Summary</h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-md-3">
                                <div class="p-3 bg-light rounded">
                                    <h6 class="text-muted mb-1">Average Volatility</h6>
                                    <h4 class="text-primary mb-0">@riskMetrics.Average(m => m.Volatility).ToString("P2")</h4>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="p-3 bg-light rounded">
                                    <h6 class="text-muted mb-1">Average Sharpe Ratio</h6>
                                    <h4 class="text-success mb-0">@riskMetrics.Average(m => m.SharpeRatio).ToString("F2")</h4>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="p-3 bg-light rounded">
                                    <h6 class="text-muted mb-1">Average VaR 95%</h6>
                                    <h4 class="text-warning mb-0">@riskMetrics.Average(m => m.ValueAtRisk95).ToString("P2")</h4>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="p-3 bg-light rounded">
                                    <h6 class="text-muted mb-1">Max Drawdown</h6>
                                    <h4 class="text-danger mb-0">@riskMetrics.Max(m => m.MaximumDrawdown).ToString("P2")</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (errorMessage != null)
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger" role="alert">
                    <h6 class="alert-heading">Error Loading Risk Data</h6>
                    <p class="mb-0">@errorMessage</p>
                </div>
            </div>
        </div>
    }

    @if (!riskMetrics.Any() && !isLoading && errorMessage == null)
    {
        <div class="row">
            <div class="col-12">
                <div class="text-center text-muted py-5">
                    <i class="oi oi-graph display-1"></i>
                    <p class="mt-3">Enter asset symbols and click "Load Risk Data" to view risk metrics</p>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string symbolsInput = "AAPL, MSFT, GOOGL, TSLA, AMZN";
    private int timePeriod = 252;
    private List<RiskMetrics> riskMetrics = new();
    private List<RiskAlert> alerts = new();
    private DateTime lastUpdated = DateTime.MinValue;
    private bool isLoading = false;
    private string? errorMessage;

    private async Task LoadRiskMetrics()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            riskMetrics.Clear();
            alerts.Clear();

            if (string.IsNullOrWhiteSpace(symbolsInput))
            {
                errorMessage = "Please enter at least one asset symbol.";
                return;
            }

            var symbols = symbolsInput.Split(',', StringSplitOptions.RemoveEmptyEntries)
                .Select(s => s.Trim().ToUpper())
                .Where(s => !string.IsNullOrEmpty(s))
                .ToList();

            if (!symbols.Any())
            {
                errorMessage = "Please enter valid asset symbols.";
                return;
            }

            Logger.LogInformation("Loading risk metrics for symbols: {Symbols}", string.Join(", ", symbols));

            var metrics = await RiskMetricsService.GetMultipleAssetRiskMetricsAsync(symbols, timePeriod);
            
            if (metrics != null && metrics.Any())
            {
                riskMetrics = metrics.Where(m => string.IsNullOrEmpty(m.Error)).ToList();
                alerts = RiskMetricsService.GenerateRiskAlerts(riskMetrics);
                lastUpdated = DateTime.UtcNow;
                
                Logger.LogInformation("Loaded {Count} risk metrics and generated {AlertCount} alerts", 
                    riskMetrics.Count, alerts.Count);
            }
            else
            {
                errorMessage = "Failed to load risk metrics. Please check the symbols and try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading risk metrics");
            errorMessage = "An unexpected error occurred while loading risk data.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetAlertClass(string severity)
    {
        return severity switch
        {
            "critical" => "alert-danger",
            "high" => "alert-warning",
            "medium" => "alert-info",
            "low" => "alert-success",
            _ => "alert-secondary"
        };
    }

    private string GetSeverityBadgeClass(string severity)
    {
        return severity switch
        {
            "critical" => "bg-danger",
            "high" => "bg-warning",
            "medium" => "bg-info",
            "low" => "bg-success",
            _ => "bg-secondary"
        };
    }
}
