@page "/var-calculator"

<PageTitle>VaR Calculator</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    <!-- Header -->
    <MudText Typo="Typo.h4" Class="mb-4">Value at Risk Calculator</MudText>
    <MudText Typo="Typo.body1" Class="mb-6" Style="opacity: 0.7;">
        Calculate Value at Risk using multiple methodologies and confidence levels
    </MudText>

    <!-- Input Form -->
    <MudPaper Class="pa-4 mb-6" Elevation="1">
        <MudText Typo="Typo.h6" Class="mb-4">Calculation Parameters</MudText>
        <MudGrid>
            <MudItem xs="12" sm="6" md="3">
                <MudTextField @bind-Value="symbol" 
                             Label="Stock Symbol" 
                             Variant="Variant.Outlined" 
                             Placeholder="e.g., AAPL, MSFT, GOOGL"
                             Adornment="Adornment.Start"
                             AdornmentIcon="Icons.Material.Filled.Search" />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudSelect @bind-Value="calculationType" 
                          Label="Calculation Method" 
                          Variant="Variant.Outlined"
                          T="string">
                    <MudSelectItem Value="@("Historical")">Historical Simulation</MudSelectItem>
                    <MudSelectItem Value="@("Parametric")">Parametric (Normal)</MudSelectItem>
                    <MudSelectItem Value="@("MonteCarlo")">Monte Carlo</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudSelect @bind-Value="confidenceLevel" 
                          Label="Confidence Level" 
                          Variant="Variant.Outlined"
                          T="double">
                    <MudSelectItem Value="0.90">90%</MudSelectItem>
                    <MudSelectItem Value="0.95">95%</MudSelectItem>
                    <MudSelectItem Value="0.99">99%</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudTextField @bind-Value="days" 
                             Label="Time Period (Days)" 
                             Variant="Variant.Outlined" 
                             InputType="InputType.Number" />
            </MudItem>
        </MudGrid>

        <MudButton Variant="Variant.Filled" 
                  Color="Color.Primary" 
                  StartIcon="Icons.Material.Filled.Calculate"
                  OnClick="CalculateVaR"
                  Disabled="isLoading"
                  Class="mt-4">
            @if (isLoading)
            {
                <MudProgressCircular Class="ms-n1" Color="Color.Inherit" Indeterminate="true" Size="Size.Small" />
                <MudText Class="ms-2">Calculating...</MudText>
            }
            else
            {
                <MudText>Calculate VaR</MudText>
            }
        </MudButton>
    </MudPaper>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mb-4" ShowCloseIcon="true" CloseIconClicked="() => errorMessage = string.Empty">
            @errorMessage
        </MudAlert>
    }

    @if (varResult != null)
    {
        <!-- VaR Results -->
        <MudGrid Class="mb-6">
            <MudItem xs="12" sm="6" md="4">
                <MudCard Elevation="2" Class="pa-4 text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.Warning" Color="Color.Error" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h6" Class="mb-1">Value at Risk</MudText>
                        <MudText Typo="Typo.h4" Color="Color.Error">@(varResult.VaR.ToString("P2"))</MudText>
                        <MudText Typo="Typo.caption" Style="opacity: 0.7;">@(confidenceLevel.ToString("P0")) Confidence</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="4">
                <MudCard Elevation="2" Class="pa-4 text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.TrendingDown" Color="Color.Warning" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h6" Class="mb-1">Conditional VaR</MudText>
                        <MudText Typo="Typo.h4" Color="Color.Warning">@(varResult.CVaR.ToString("P2"))</MudText>
                        <MudText Typo="Typo.caption" Style="opacity: 0.7;">Expected Shortfall</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="4">
                <MudCard Elevation="2" Class="pa-4 text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.Analytics" Color="Color.Info" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h6" Class="mb-1">Sample Size</MudText>
                        <MudText Typo="Typo.h4" Color="Color.Info">@varResult.SampleSize</MudText>
                        <MudText Typo="Typo.caption" Style="opacity: 0.7;">Data Points</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Detailed Results -->
        <MudPaper Class="pa-4" Elevation="1">
            <MudText Typo="Typo.h6" Class="mb-4">Calculation Details</MudText>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTable Items="GetCalculationDetails()" Hover="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Parameter</MudTh>
                            <MudTh>Value</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.Parameter</MudTd>
                            <MudTd>@context.Value</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.h6" Class="mb-3">Risk Interpretation</MudText>
                    <MudAlert Severity="GetRiskSeverity()" Class="mb-3">
                        @GetRiskInterpretation()
                    </MudAlert>
                    <MudText Typo="Typo.body2" Class="mb-2">
                        <strong>Method:</strong> @calculationType
                    </MudText>
                    <MudText Typo="Typo.body2">
                        <strong>Calculated:</strong> @DateTime.Now.ToString("MMM dd, yyyy HH:mm")
                    </MudText>
                </MudItem>
            </MudGrid>
        </MudPaper>
    }
</MudContainer>

@code {
    private string symbol = "AAPL";
    private string calculationType = "Historical";
    private double confidenceLevel = 0.95;
    private int days = 252;
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private VaRResult? varResult;

    private async Task CalculateVaR()
    {
        if (string.IsNullOrWhiteSpace(symbol))
        {
            errorMessage = "Please enter a stock symbol";
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            // Simulate calculation
            await Task.Delay(2000);
            
            var random = new Random();
            var volatility = 0.15 + random.NextDouble() * 0.1;
            var expectedReturn = 0.08 + random.NextDouble() * 0.05;
            
            varResult = new VaRResult(
                volatility * Math.Sqrt(days / 252.0) * GetZScore(confidenceLevel),
                volatility * Math.Sqrt(days / 252.0) * GetZScore(confidenceLevel) * 1.2,
                days
            );
        }
        catch (Exception ex)
        {
            errorMessage = $"Error calculating VaR: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private double GetZScore(double confidenceLevel)
    {
        return confidenceLevel switch
        {
            0.90 => 1.28,
            0.95 => 1.65,
            0.99 => 2.33,
            _ => 1.65
        };
    }

    private List<DetailItem> GetCalculationDetails()
    {
        if (varResult == null) return new List<DetailItem>();

        return new List<DetailItem>
        {
            new("Symbol", symbol.ToUpper()),
            new("Confidence Level", confidenceLevel.ToString("P0")),
            new("Time Horizon", $"{days} day(s)"),
            new("Sample Size", varResult.SampleSize.ToString()),
            new("Simulation Count", "10000")
        };
    }

    private Severity GetRiskSeverity()
    {
        if (varResult == null) return Severity.Normal;
        
        if (varResult.VaR < 0.02) return Severity.Success;
        if (varResult.VaR < 0.05) return Severity.Warning;
        return Severity.Error;
    }

    private string GetRiskInterpretation()
    {
        if (varResult == null) return "";
        
        var riskLevel = varResult.VaR < 0.02 ? "Low" : varResult.VaR < 0.05 ? "Moderate" : "High";
        return $"This investment has {riskLevel.ToLower()} risk. There is a {(1 - confidenceLevel):P0} chance of losing more than {varResult.VaR:P2} of the investment value over the specified time period.";
    }

    private record DetailItem(string Parameter, string Value);
    private record VaRResult(double VaR, double CVaR, int SampleSize);

    protected override void OnInitialized()
    {
        days = 252;
    }
}