@page "/efficient-frontier"

<PageTitle>Efficient Frontier</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    <!-- Header -->
    <MudText Typo="Typo.h4" Class="mb-4">Efficient Frontier</MudText>
    <MudText Typo="Typo.body1" Class="mb-6" Style="opacity: 0.7;">
        Visualize optimal portfolio combinations and risk-return trade-offs
    </MudText>

    <!-- Input Section -->
    <MudPaper Class="pa-4 mb-6" Elevation="1">
        <MudText Typo="Typo.h6" Class="mb-4">Portfolio Configuration</MudText>
        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="symbols" 
                             Label="Stock Symbols" 
                             Variant="Variant.Outlined" 
                             Placeholder="e.g., AAPL,MSFT,GOOGL"
                             HelperText="Comma-separated list of symbols" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudSelect @bind-Value="optimizationMethod" 
                          Label="Optimization Method" 
                          Variant="Variant.Outlined"
                          T="string">
                    <MudSelectItem Value="@("MeanVariance")">Mean-Variance</MudSelectItem>
                    <MudSelectItem Value="@("MinimumVariance")">Minimum Variance</MudSelectItem>
                    <MudSelectItem Value="@("MaximumSharpe")">Maximum Sharpe</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="numPoints" 
                             Label="Number of Points" 
                             Variant="Variant.Outlined" 
                             InputType="InputType.Number" />
            </MudItem>
        </MudGrid>

        <MudButton Variant="Variant.Filled" 
                  Color="Color.Primary" 
                  StartIcon="Icons.Material.Filled.TrendingUp"
                  OnClick="CalculateEfficientFrontier"
                  Disabled="isLoading"
                  Class="mt-4">
            @if (isLoading)
            {
                <MudProgressCircular Class="ms-n1" Color="Color.Inherit" Indeterminate="true" Size="Size.Small" />
                <MudText Class="ms-2">Calculating...</MudText>
            }
            else
            {
                <MudText>Generate Efficient Frontier</MudText>
            }
        </MudButton>
    </MudPaper>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mb-4" ShowCloseIcon="true" CloseIconClicked="() => errorMessage = string.Empty">
            @errorMessage
        </MudAlert>
    }

    @if (efficientFrontier != null)
    {
        <!-- Chart Container -->
        <MudPaper Class="pa-4 mb-6" Elevation="1">
            <MudText Typo="Typo.h6" Class="mb-4">Efficient Frontier Chart</MudText>
            <div style="height: 500px; width: 100%; background: linear-gradient(45deg, #f0f0f0 25%, transparent 25%), linear-gradient(-45deg, #f0f0f0 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #f0f0f0 75%), linear-gradient(-45deg, transparent 75%, #f0f0f0 75%); background-size: 20px 20px; background-position: 0 0, 0 10px, 10px -10px, -10px 0px; display: flex; align-items: center; justify-content: center; border: 1px solid #ddd;">
                <MudText Typo="Typo.h6" Style="color: #666;">Chart visualization would appear here</MudText>
            </div>
        </MudPaper>

        <!-- Portfolio Points Table -->
        <MudPaper Class="pa-4" Elevation="1">
            <MudText Typo="Typo.h6" Class="mb-4">Portfolio Points</MudText>
            <MudTable Items="efficientFrontier.Points.Take(10)" Hover="true" Dense="true" FixedHeader="true" Height="400px">
                <HeaderContent>
                    <MudTh>Expected Return</MudTh>
                    <MudTh>Volatility</MudTh>
                    <MudTh>Sharpe Ratio</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.ExpectedReturn.ToString("P2")</MudTd>
                    <MudTd>@context.Volatility.ToString("P2")</MudTd>
                    <MudTd>@context.SharpeRatio.ToString("F2")</MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    }
</MudContainer>

@code {
    private string symbols = "AAPL,MSFT,GOOGL";
    private string optimizationMethod = "MeanVariance";
    private int numPoints = 50;
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private EfficientFrontierData? efficientFrontier;

    private async Task CalculateEfficientFrontier()
    {
        if (string.IsNullOrWhiteSpace(symbols))
        {
            errorMessage = "Please enter stock symbols";
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var symbolList = symbols.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                  .Select(s => s.Trim().ToUpper())
                                  .ToList();

            if (symbolList.Count < 2)
            {
                errorMessage = "Please enter at least 2 stock symbols";
                return;
            }

            // Simulate calculation
            await Task.Delay(2000);
            
            efficientFrontier = CreateMockEfficientFrontier(symbolList);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error calculating efficient frontier: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private EfficientFrontierData CreateMockEfficientFrontier(List<string> symbols)
    {
        var points = new List<EfficientFrontierPoint>();
        var random = new Random();
        
        for (int i = 0; i < numPoints; i++)
        {
            var volatility = 0.1 + (0.3 * i / (double)numPoints);
            var expectedReturn = 0.05 + (0.15 * i / (double)numPoints) + (random.NextDouble() - 0.5) * 0.02;
            var sharpeRatio = expectedReturn / volatility;
            
            points.Add(new EfficientFrontierPoint(expectedReturn, volatility, sharpeRatio));
        }

        return new EfficientFrontierData(points, points.OrderByDescending(p => p.SharpeRatio).First());
    }

    protected override void OnInitialized()
    {
        numPoints = 50;
    }

    private record EfficientFrontierPoint(double ExpectedReturn, double Volatility, double SharpeRatio);
    private record EfficientFrontierData(List<EfficientFrontierPoint> Points, EfficientFrontierPoint OptimalPortfolio);
}