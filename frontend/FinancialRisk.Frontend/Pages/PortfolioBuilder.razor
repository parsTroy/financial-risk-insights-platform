@page "/portfolio-builder"
@using FinancialRisk.Frontend.Models
@using FinancialRisk.Frontend.Services
@inject PortfolioApiService PortfolioService
@inject VaRApiService VaRService
@inject ILogger<PortfolioBuilder> Logger

<PageTitle>Portfolio Builder</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="display-4 mb-4">Portfolio Builder</h1>
            <p class="lead">Build and manage your investment portfolios with advanced risk analytics and optimization tools.</p>
        </div>
    </div>

    <div class="row">
        <!-- Left Panel: Asset Search and Management -->
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="oi oi-magnifying-glass me-2"></i>Asset Search & Management
                    </h5>
                </div>
                <div class="card-body">
                    <!-- Asset Search -->
                    <div class="mb-3">
                        <label for="assetSearch" class="form-label">Search Assets</label>
                        <div class="input-group">
                            <input type="text" 
                                   class="form-control" 
                                   id="assetSearch" 
                                   @bind="searchQuery" 
                                   @onkeyup="@(async (e) => await SearchAssets())"
                                   placeholder="Enter symbol (e.g., AAPL, MSFT, GOOGL)" />
                            <button class="btn btn-outline-secondary" 
                                    type="button" 
                                    @onclick="@(async () => await SearchAssets())"
                                    disabled="@isSearching">
                                @if (isSearching)
                                {
                                    <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                }
                                <i class="oi oi-magnifying-glass"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Search Results -->
                    @if (searchResults.Any())
                    {
                        <div class="mb-3">
                            <h6>Search Results</h6>
                            <div class="list-group" style="max-height: 300px; overflow-y: auto;">
                                @foreach (var asset in searchResults)
                                {
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>@asset.Symbol</strong>
                                            <br>
                                            <small class="text-muted">@asset.Name</small>
                                        </div>
                                        <button class="btn btn-sm btn-outline-primary" 
                                                @onclick="@(() => AddAssetToPortfolio(asset))"
                                                disabled="@portfolioAssets.Any(a => a.Symbol == asset.Symbol)">
                                            <i class="oi oi-plus"></i> Add
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    <!-- Portfolio Assets -->
                    <div class="mb-3">
                        <h6>Portfolio Assets (@portfolioAssets.Count)</h6>
                        @if (portfolioAssets.Any())
                        {
                            <div class="list-group">
                                @foreach (var asset in portfolioAssets)
                                {
                                    <div class="list-group-item">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="flex-grow-1">
                                                <strong>@asset.Symbol</strong>
                                                <br>
                                                <small class="text-muted">@asset.Name</small>
                                            </div>
                                            <div class="d-flex align-items-center">
                                                <div class="me-3" style="width: 100px;">
                                                    <input type="number" 
                                                           class="form-control form-control-sm" 
                                                           @bind="asset.Weight" 
                                                           @onchange="@(() => UpdatePortfolioWeights())"
                                                           min="0" 
                                                           max="100" 
                                                           step="0.1" />
                                                    <small class="text-muted">%</small>
                                                </div>
                                                <button class="btn btn-sm btn-outline-danger" 
                                                        @onclick="@(() => RemoveAssetFromPortfolio(asset))">
                                                    <i class="oi oi-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center text-muted py-3">
                                <i class="oi oi-pie-chart display-4"></i>
                                <p class="mt-2">No assets in portfolio</p>
                                <small>Search and add assets to build your portfolio</small>
                            </div>
                        }
                    </div>

                    <!-- Portfolio Actions -->
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" 
                                @onclick="@(async () => await SavePortfolio())"
                                disabled="@!portfolioAssets.Any() || isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            }
                            <i class="oi oi-cloud-upload me-2"></i>Save Portfolio
                        </button>
                        <button class="btn btn-outline-secondary" 
                                @onclick="@(async () => await LoadPortfolio())"
                                disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            }
                            <i class="oi oi-cloud-download me-2"></i>Load Portfolio
                        </button>
                        <button class="btn btn-outline-warning" 
                                @onclick="@(async () => await OptimizePortfolio())"
                                disabled="@!portfolioAssets.Any() || isOptimizing">
                            @if (isOptimizing)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            }
                            <i class="oi oi-cog me-2"></i>Optimize Portfolio
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Panel: Portfolio Analysis and Visualization -->
        <div class="col-lg-8">
            <div class="row">
                <!-- Portfolio Summary -->
                <div class="col-12 mb-4">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                <i class="oi oi-bar-chart me-2"></i>Portfolio Summary
                            </h5>
                        </div>
                        <div class="card-body">
                            @if (portfolioAssets.Any())
                            {
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="text-center p-3 bg-light rounded">
                                            <h6 class="text-muted mb-1">Total Weight</h6>
                                            <h4 class="@(totalWeight == 100 ? "text-success" : totalWeight > 100 ? "text-danger" : "text-warning") mb-0">
                                                @(totalWeight.ToString("F1"))%
                                            </h4>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-center p-3 bg-light rounded">
                                            <h6 class="text-muted mb-1">Assets</h6>
                                            <h4 class="text-primary mb-0">@portfolioAssets.Count</h4>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-center p-3 bg-light rounded">
                                            <h6 class="text-muted mb-1">Expected Return</h6>
                                            <h4 class="text-success mb-0">@(expectedReturn.ToString("P2"))</h4>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-center p-3 bg-light rounded">
                                            <h6 class="text-muted mb-1">Risk Level</h6>
                                            <h4 class="@(riskLevel == "Low" ? "text-success" : riskLevel == "Medium" ? "text-warning" : "text-danger") mb-0">
                                                @riskLevel
                                            </h4>
                                        </div>
                                    </div>
                                </div>

                                @if (totalWeight != 100)
                                {
                                    <div class="alert alert-warning mt-3" role="alert">
                                        <i class="oi oi-warning me-2"></i>
                                        Portfolio weights must total 100%. Current total: @(totalWeight.ToString("F1"))%
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="text-center text-muted py-4">
                                    <i class="oi oi-pie-chart display-1"></i>
                                    <p class="mt-3">Add assets to see portfolio summary</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Portfolio Visualization -->
                <div class="col-md-6 mb-4">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                <i class="oi oi-pie-chart me-2"></i>Asset Allocation
                            </h5>
                        </div>
                        <div class="card-body">
                            @if (portfolioAssets.Any())
                            {
                                <div class="portfolio-chart">
                                    <!-- Simple pie chart representation -->
                                    <div class="d-flex flex-wrap gap-2">
                                        @foreach (var asset in portfolioAssets.OrderByDescending(a => a.Weight))
                                        {
                                            <div class="asset-allocation-item" 
                                                 style="width: @(asset.Weight * 2)px; height: 20px; background-color: @GetAssetColor(asset.Symbol); border-radius: 3px;"
                                                 title="@asset.Symbol: @(asset.Weight.ToString("F1"))%">
                                            </div>
                                        }
                                    </div>
                                    <div class="mt-3">
                                        @foreach (var asset in portfolioAssets.OrderByDescending(a => a.Weight))
                                        {
                                            <div class="d-flex justify-content-between align-items-center mb-1">
                                                <div class="d-flex align-items-center">
                                                    <div class="me-2" 
                                                         style="width: 12px; height: 12px; background-color: @GetAssetColor(asset.Symbol); border-radius: 2px;">
                                                    </div>
                                                    <span>@asset.Symbol</span>
                                                </div>
                                                <span class="text-muted">@(asset.Weight.ToString("F1"))%</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="text-center text-muted py-4">
                                    <i class="oi oi-pie-chart display-4"></i>
                                    <p class="mt-3">No assets to display</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Risk Analysis -->
                <div class="col-md-6 mb-4">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                <i class="oi oi-warning me-2"></i>Risk Analysis
                            </h5>
                        </div>
                        <div class="card-body">
                            @if (portfolioAssets.Any() && totalWeight == 100)
                            {
                                <div class="mb-3">
                                    <button class="btn btn-outline-primary btn-sm" 
                                            @onclick="@(async () => await CalculateVaR())"
                                            disabled="@isCalculatingVaR">
                                        @if (isCalculatingVaR)
                                        {
                                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                        }
                                        <i class="oi oi-calculator me-1"></i>Calculate VaR
                                    </button>
                                </div>

                                @if (varResult != null)
                                {
                                    <div class="row">
                                        <div class="col-6">
                                            <div class="text-center p-2 bg-light rounded">
                                                <h6 class="text-muted mb-1">VaR (95%)</h6>
                                                <h5 class="text-danger mb-0">@(varResult.VaR.ToString("P2"))</h5>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="text-center p-2 bg-light rounded">
                                                <h6 class="text-muted mb-1">CVaR (95%)</h6>
                                                <h5 class="text-danger mb-0">@(varResult.CVaR.ToString("P2"))</h5>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else if (portfolioAssets.Any())
                            {
                                <div class="alert alert-warning" role="alert">
                                    <i class="oi oi-warning me-2"></i>
                                    Complete portfolio weights to enable risk analysis
                                </div>
                            }
                            else
                            {
                                <div class="text-center text-muted py-4">
                                    <i class="oi oi-warning display-4"></i>
                                    <p class="mt-3">Add assets to analyze risk</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Portfolio Optimization Results -->
                @if (optimizationResult != null)
                {
                    <div class="col-12 mb-4">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">
                                    <i class="oi oi-cog me-2"></i>Optimization Results
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="text-center p-3 bg-light rounded">
                                            <h6 class="text-muted mb-1">Expected Return</h6>
                                            <h4 class="text-success mb-0">@(optimizationResult.ExpectedReturn.ToString("P2"))</h4>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-center p-3 bg-light rounded">
                                            <h6 class="text-muted mb-1">Expected Volatility</h6>
                                            <h4 class="text-warning mb-0">@(optimizationResult.ExpectedVolatility.ToString("P2"))</h4>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-center p-3 bg-light rounded">
                                            <h6 class="text-muted mb-1">Sharpe Ratio</h6>
                                            <h4 class="text-info mb-0">@(optimizationResult.SharpeRatio.ToString("F3"))</h4>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-center p-3 bg-light rounded">
                                            <h6 class="text-muted mb-1">Execution Time</h6>
                                            <h4 class="text-secondary mb-0">@(optimizationResult.ExecutionTime.ToString("F2"))s</h4>
                                        </div>
                                    </div>
                                </div>

                                <div class="mt-3">
                                    <h6>Optimal Weights</h6>
                                    <div class="table-responsive">
                                        <table class="table table-sm">
                                            <thead>
                                                <tr>
                                                    <th>Asset</th>
                                                    <th>Current Weight</th>
                                                    <th>Optimal Weight</th>
                                                    <th>Difference</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var weight in optimizationResult.OptimalWeights)
                                                {
                                                    var currentWeight = portfolioAssets.FirstOrDefault(a => a.Symbol == weight.Symbol)?.Weight ?? 0;
                                                    var difference = weight.Weight - currentWeight;
                                                    <tr>
                                                        <td>@weight.Symbol</td>
                                                        <td>@(currentWeight.ToString("F1"))%</td>
                                                        <td>@(weight.Weight.ToString("F1"))%</td>
                                                        <td class="@(difference > 0 ? "text-success" : difference < 0 ? "text-danger" : "text-muted")">
                                                            @(difference > 0 ? "+" : "")@(difference.ToString("F1"))%
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string searchQuery = "";
    private List<AssetSearchResult> searchResults = new();
    private List<PortfolioAsset> portfolioAssets = new();
    private bool isSearching = false;
    private bool isSaving = false;
    private bool isLoading = false;
    private bool isOptimizing = false;
    private bool isCalculatingVaR = false;
    private VaRCalculationResult? varResult;
    private PortfolioOptimizationResult? optimizationResult;

    private double totalWeight => portfolioAssets.Sum(a => a.Weight);
    private double expectedReturn => CalculateExpectedReturn();
    private string riskLevel => CalculateRiskLevel();

    private async Task SearchAssets()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            searchResults.Clear();
            return;
        }

        try
        {
            isSearching = true;
            // Simulate asset search - in real implementation, this would call a financial data API
            await Task.Delay(500); // Simulate API call
            
            // Mock search results
            searchResults = GetMockSearchResults(searchQuery);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error searching assets");
        }
        finally
        {
            isSearching = false;
        }
    }

    private void AddAssetToPortfolio(AssetSearchResult asset)
    {
        if (!portfolioAssets.Any(a => a.Symbol == asset.Symbol))
        {
            portfolioAssets.Add(new PortfolioAsset
            {
                Symbol = asset.Symbol,
                Name = asset.Name,
                Weight = 0,
                ExpectedReturn = asset.ExpectedReturn,
                Volatility = asset.Volatility
            });
            UpdatePortfolioWeights();
        }
    }

    private void RemoveAssetFromPortfolio(PortfolioAsset asset)
    {
        portfolioAssets.Remove(asset);
        UpdatePortfolioWeights();
    }

    private void UpdatePortfolioWeights()
    {
        // Auto-distribute remaining weight if total is less than 100%
        if (totalWeight < 100 && portfolioAssets.Any())
        {
            var remainingWeight = 100 - totalWeight;
            var assetsWithoutWeight = portfolioAssets.Where(a => a.Weight == 0).ToList();
            
            if (assetsWithoutWeight.Any())
            {
                var weightPerAsset = remainingWeight / assetsWithoutWeight.Count;
                foreach (var asset in assetsWithoutWeight)
                {
                    asset.Weight = Math.Round(weightPerAsset, 1);
                }
            }
        }
    }

    private async Task SavePortfolio()
    {
        try
        {
            isSaving = true;
            // TODO: Implement portfolio save API call
            await Task.Delay(1000); // Simulate API call
            Logger.LogInformation("Portfolio saved successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving portfolio");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task LoadPortfolio()
    {
        try
        {
            isLoading = true;
            // TODO: Implement portfolio load API call
            await Task.Delay(1000); // Simulate API call
            Logger.LogInformation("Portfolio loaded successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading portfolio");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OptimizePortfolio()
    {
        try
        {
            isOptimizing = true;
            optimizationResult = null;

            var request = new PortfolioOptimizationRequest
            {
                Method = "mean_variance",
                Assets = portfolioAssets.Select(a => new AssetOptimizationData
                {
                    Symbol = a.Symbol,
                    Name = a.Name,
                    ExpectedReturn = a.ExpectedReturn,
                    Volatility = a.Volatility,
                    Weight = a.Weight / 100.0
                }).ToList(),
                CovarianceMatrix = GenerateCovarianceMatrix(portfolioAssets),
                RiskAversion = 1.0,
                RiskFreeRate = 0.02
            };

            var response = await PortfolioService.OptimizePortfolioAsync(request);
            
            if (response?.IsSuccess == true && response.Data != null)
            {
                optimizationResult = response.Data;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error optimizing portfolio");
        }
        finally
        {
            isOptimizing = false;
        }
    }

    private async Task CalculateVaR()
    {
        try
        {
            isCalculatingVaR = true;
            varResult = null;

            // Generate mock returns for VaR calculation
            var returns = GenerateMockReturns(portfolioAssets);
            
            var request = new VaRCalculationRequest
            {
                Returns = returns,
                ConfidenceLevel = 0.95,
                TimeHorizon = 1,
                Method = "historical"
            };

            var response = await VaRService.CalculateVaRAsync(request);
            
            if (response?.IsSuccess == true && response.Data != null)
            {
                varResult = response.Data;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error calculating VaR");
        }
        finally
        {
            isCalculatingVaR = false;
        }
    }

    private double CalculateExpectedReturn()
    {
        if (!portfolioAssets.Any()) return 0;
        
        return portfolioAssets.Sum(a => (a.Weight / 100.0) * a.ExpectedReturn);
    }

    private string CalculateRiskLevel()
    {
        if (!portfolioAssets.Any()) return "Unknown";
        
        var avgVolatility = portfolioAssets.Average(a => a.Volatility);
        return avgVolatility switch
        {
            < 0.15 => "Low",
            < 0.25 => "Medium",
            _ => "High"
        };
    }

    private string GetAssetColor(string symbol)
    {
        var colors = new[] { "#007bff", "#28a745", "#ffc107", "#dc3545", "#6f42c1", "#fd7e14", "#20c997", "#e83e8c" };
        var index = Math.Abs(symbol.GetHashCode()) % colors.Length;
        return colors[index];
    }

    private List<AssetSearchResult> GetMockSearchResults(string query)
    {
        var mockAssets = new List<AssetSearchResult>
        {
            new() { Symbol = "AAPL", Name = "Apple Inc.", ExpectedReturn = 0.08, Volatility = 0.20 },
            new() { Symbol = "MSFT", Name = "Microsoft Corporation", ExpectedReturn = 0.10, Volatility = 0.18 },
            new() { Symbol = "GOOGL", Name = "Alphabet Inc.", ExpectedReturn = 0.12, Volatility = 0.25 },
            new() { Symbol = "AMZN", Name = "Amazon.com Inc.", ExpectedReturn = 0.15, Volatility = 0.30 },
            new() { Symbol = "TSLA", Name = "Tesla Inc.", ExpectedReturn = 0.20, Volatility = 0.40 },
            new() { Symbol = "NVDA", Name = "NVIDIA Corporation", ExpectedReturn = 0.18, Volatility = 0.35 },
            new() { Symbol = "META", Name = "Meta Platforms Inc.", ExpectedReturn = 0.14, Volatility = 0.28 },
            new() { Symbol = "NFLX", Name = "Netflix Inc.", ExpectedReturn = 0.11, Volatility = 0.22 }
        };

        return mockAssets
            .Where(a => a.Symbol.Contains(query.ToUpper()) || a.Name.ToLower().Contains(query.ToLower()))
            .ToList();
    }

    private List<List<double>> GenerateCovarianceMatrix(List<PortfolioAsset> assets)
    {
        var n = assets.Count;
        var matrix = new List<List<double>>();
        var random = new Random(42);

        for (int i = 0; i < n; i++)
        {
            var row = new List<double>();
            for (int j = 0; j < n; j++)
            {
                if (i == j)
                {
                    row.Add(Math.Pow(assets[i].Volatility, 2));
                }
                else
                {
                    var correlation = random.NextDouble() * 0.6 + 0.2;
                    var covariance = correlation * assets[i].Volatility * assets[j].Volatility;
                    row.Add(covariance);
                }
            }
            matrix.Add(row);
        }

        return matrix;
    }

    private List<double> GenerateMockReturns(List<PortfolioAsset> assets)
    {
        var returns = new List<double>();
        var random = new Random(42);
        
        for (int i = 0; i < 1000; i++)
        {
            var portfolioReturn = 0.0;
            foreach (var asset in assets)
            {
                var assetReturn = random.NextGaussian(asset.ExpectedReturn, asset.Volatility);
                portfolioReturn += (asset.Weight / 100.0) * assetReturn;
            }
            returns.Add(portfolioReturn);
        }
        
        return returns;
    }
}

// Extension method for Gaussian random numbers
public static class RandomExtensions
{
    public static double NextGaussian(this Random random, double mean, double stdDev)
    {
        double u1 = 1.0 - random.NextDouble();
        double u2 = 1.0 - random.NextDouble();
        double randStdNormal = Math.Sqrt(-2.0 * Math.Log(u1)) * Math.Sin(2.0 * Math.PI * u2);
        return mean + stdDev * randStdNormal;
    }
}
