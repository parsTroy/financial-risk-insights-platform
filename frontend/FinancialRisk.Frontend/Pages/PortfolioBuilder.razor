@page "/portfolio-builder"

<PageTitle>Portfolio Builder</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    <!-- Header -->
    <MudText Typo="Typo.h4" Class="mb-4">Portfolio Builder</MudText>
    <MudText Typo="Typo.body1" Class="mb-6" Style="opacity: 0.7;">
        Create and manage investment portfolios with real-time market data
    </MudText>

    <!-- Portfolio Input Form -->
    <MudPaper Class="pa-4 mb-6" Elevation="1">
        <MudText Typo="Typo.h6" Class="mb-4">Create New Portfolio</MudText>
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="portfolioName" 
                             Label="Portfolio Name" 
                             Variant="Variant.Outlined" 
                             Placeholder="e.g., My Growth Portfolio" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="portfolioDescription" 
                             Label="Description" 
                             Variant="Variant.Outlined" 
                             Placeholder="Brief description of your portfolio strategy" />
            </MudItem>
        </MudGrid>

        <MudButton Variant="Variant.Filled" 
                  Color="Color.Primary" 
                  StartIcon="Icons.Material.Filled.Add"
                  OnClick="CreatePortfolio"
                  Disabled="isLoading"
                  Class="mt-4">
            @if (isLoading)
            {
                <MudProgressCircular Class="ms-n1" Color="Color.Inherit" Indeterminate="true" Size="Size.Small" />
                <MudText Class="ms-2">Creating...</MudText>
            }
            else
            {
                <MudText>Create Portfolio</MudText>
            }
        </MudButton>
    </MudPaper>

    <!-- Asset Search and Add -->
    <MudPaper Class="pa-4 mb-6" Elevation="1">
        <MudText Typo="Typo.h6" Class="mb-4">Add Assets to Portfolio</MudText>
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="searchSymbol" 
                             Label="Search Symbol" 
                             Variant="Variant.Outlined" 
                             Placeholder="e.g., AAPL, MSFT, GOOGL"
                             Adornment="Adornment.End"
                             AdornmentIcon="Icons.Material.Filled.Search" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="assetWeight" 
                             Label="Weight (%)" 
                             Variant="Variant.Outlined" 
                             InputType="InputType.Number" />
            </MudItem>
        </MudGrid>

        <MudButton Variant="Variant.Outlined" 
                  Color="Color.Primary" 
                  StartIcon="Icons.Material.Filled.Add"
                  OnClick="AddAsset"
                  Disabled="isSearching"
                  Class="mt-4">
            @if (isSearching)
            {
                <MudProgressCircular Class="ms-n1" Color="Color.Inherit" Indeterminate="true" Size="Size.Small" />
                <MudText Class="ms-2">Adding...</MudText>
            }
            else
            {
                <MudText>Add Asset</MudText>
            }
        </MudButton>
    </MudPaper>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mb-4" ShowCloseIcon="true" CloseIconClicked="() => errorMessage = string.Empty">
            @errorMessage
        </MudAlert>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <MudAlert Severity="Severity.Success" Class="mb-4" ShowCloseIcon="true" CloseIconClicked="() => successMessage = string.Empty">
            @successMessage
        </MudAlert>
    }

    <!-- Current Portfolio Holdings -->
    @if (portfolioHoldings.Any())
    {
        <MudPaper Class="pa-4" Elevation="1">
            <MudText Typo="Typo.h6" Class="mb-4">Portfolio Holdings</MudText>
            <MudTable Items="portfolioHoldings" Hover="true" Dense="true">
                <HeaderContent>
                    <MudTh>Symbol</MudTh>
                    <MudTh>Weight</MudTh>
                    <MudTh>Current Price</MudTh>
                    <MudTh>Value</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Symbol</MudTd>
                    <MudTd>@context.Weight.ToString("P2")</MudTd>
                    <MudTd>@context.CurrentPrice.ToString("C2")</MudTd>
                    <MudTd>@context.Value.ToString("C2")</MudTd>
                    <MudTd>
                        <MudIconButton Icon="Icons.Material.Filled.Delete" 
                                      Color="Color.Error" 
                                      Size="Size.Small"
                                      OnClick="() => RemoveAsset(context.Symbol)" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    }
</MudContainer>

@code {
    private string portfolioName = string.Empty;
    private string portfolioDescription = string.Empty;
    private string searchSymbol = string.Empty;
    private double assetWeight = 10;
    private bool isLoading = false;
    private bool isSearching = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private List<PortfolioHolding> portfolioHoldings = new();

    private async Task CreatePortfolio()
    {
        if (string.IsNullOrWhiteSpace(portfolioName))
        {
            errorMessage = "Please enter a portfolio name";
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            // Simulate portfolio creation
            await Task.Delay(1000);
            successMessage = $"Portfolio '{portfolioName}' created successfully!";
            portfolioName = string.Empty;
            portfolioDescription = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating portfolio: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AddAsset()
    {
        if (string.IsNullOrWhiteSpace(searchSymbol))
        {
            errorMessage = "Please enter a symbol";
            return;
        }

        isSearching = true;
        errorMessage = string.Empty;

        try
        {
            // Simulate asset addition
            await Task.Delay(500);
            
            var random = new Random();
            var holding = new PortfolioHolding(
                searchSymbol.ToUpper(),
                assetWeight / 100.0,
                100 + random.NextDouble() * 200,
                (100 + random.NextDouble() * 200) * (assetWeight / 100.0) * 1000
            );

            portfolioHoldings.Add(holding);
            successMessage = $"Asset {searchSymbol} added successfully!";
            searchSymbol = string.Empty;
            assetWeight = 10;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding asset: {ex.Message}";
        }
        finally
        {
            isSearching = false;
        }
    }

    private void RemoveAsset(string symbol)
    {
        portfolioHoldings.RemoveAll(h => h.Symbol == symbol);
        successMessage = $"Asset {symbol} removed successfully!";
    }

    protected override void OnInitialized()
    {
        assetWeight = 10;
    }

    private record PortfolioHolding(string Symbol, double Weight, double CurrentPrice, double Value);
}