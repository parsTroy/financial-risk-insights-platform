@using FinancialRisk.Frontend.Models
@using FinancialRisk.Frontend.Services
@inject PortfolioBuilderApiService PortfolioService
@inject ILogger<PortfolioManager> Logger

<div class="modal fade @(IsVisible ? "show" : "")" 
     style="display: @(IsVisible ? "block" : "none")" 
     tabindex="-1" 
     role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="oi oi-folder me-2"></i>@(IsSaving ? "Save Portfolio" : "Load Portfolio")
                </h5>
                <button type="button" class="btn-close" @onclick="@(() => Close())"></button>
            </div>
            <div class="modal-body">
                @if (IsSaving)
                {
                    <EditForm Model="@saveRequest" OnValidSubmit="@(async () => await SavePortfolio())">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="portfolioName" class="form-label">Portfolio Name</label>
                            <InputText @bind-Value="saveRequest.Name" 
                                     class="form-control" 
                                     id="portfolioName" 
                                     placeholder="Enter portfolio name" />
                        </div>

                        <div class="mb-3">
                            <label for="portfolioDescription" class="form-label">Description (Optional)</label>
                            <InputTextArea @bind-Value="saveRequest.Description" 
                                         class="form-control" 
                                         id="portfolioDescription" 
                                         rows="3" 
                                         placeholder="Enter portfolio description" />
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <InputCheckbox @bind-Value="saveRequest.IsPublic" 
                                             class="form-check-input" 
                                             id="isPublic" />
                                <label class="form-check-label" for="isPublic">
                                    Make portfolio public
                                </label>
                            </div>
                        </div>

                        <div class="mb-3">
                            <h6>Portfolio Assets (@PortfolioAssets.Count)</h6>
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Symbol</th>
                                            <th>Name</th>
                                            <th>Weight</th>
                                            <th>Expected Return</th>
                                            <th>Volatility</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var asset in PortfolioAssets)
                                        {
                                            <tr>
                                                <td>@asset.Symbol</td>
                                                <td>@asset.Name</td>
                                                <td>@(asset.Weight.ToString("F1"))%</td>
                                                <td>@(asset.ExpectedReturn.ToString("P2"))</td>
                                                <td>@(asset.Volatility.ToString("P2"))</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <button type="button" class="btn btn-secondary me-md-2" @onclick="@(() => Close())">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                                @if (isProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                }
                                <i class="oi oi-cloud-upload me-2"></i>Save Portfolio
                            </button>
                        </div>
                    </EditForm>
                }
                else
                {
                    <div class="mb-3">
                        <label for="searchQuery" class="form-label">Search Portfolios</label>
                        <div class="input-group">
                            <input type="text" 
                                   class="form-control" 
                                   id="searchQuery" 
                                   @bind="searchQuery" 
                                   @onkeyup="@(async (e) => await SearchPortfolios())"
                                   placeholder="Search by name or description" />
                            <button class="btn btn-outline-secondary" 
                                    type="button" 
                                    @onclick="@(async () => await SearchPortfolios())"
                                    disabled="@isSearching">
                                @if (isSearching)
                                {
                                    <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                }
                                <i class="oi oi-magnifying-glass"></i>
                            </button>
                        </div>
                    </div>

                    @if (portfolios.Any())
                    {
                        <div class="list-group" style="max-height: 400px; overflow-y: auto;">
                            @foreach (var portfolio in portfolios)
                            {
                                <div class="list-group-item">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <h6 class="mb-1">@portfolio.Name</h6>
                                            @if (!string.IsNullOrEmpty(portfolio.Description))
                                            {
                                                <p class="mb-1 text-muted">@portfolio.Description</p>
                                            }
                                            <small class="text-muted">
                                                @portfolio.Assets.Count assets • 
                                                Modified: @portfolio.ModifiedDate.ToString("MMM dd, yyyy") •
                                                @(portfolio.IsPublic ? "Public" : "Private")
                                            </small>
                                        </div>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary" 
                                                    @onclick="@(() => LoadPortfolio(portfolio))"
                                                    disabled="@isProcessing">
                                                <i class="oi oi-cloud-download"></i> Load
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" 
                                                    @onclick="@(() => DeletePortfolio(portfolio))"
                                                    disabled="@isProcessing">
                                                <i class="oi oi-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        @if (totalPages > 1)
                        {
                            <nav aria-label="Portfolio pagination" class="mt-3">
                                <ul class="pagination pagination-sm justify-content-center">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" 
                                                @onclick="@(async () => await ChangePage(currentPage - 1))"
                                                disabled="@(currentPage == 1)">
                                            Previous
                                        </button>
                                    </li>
                                    
                                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                    {
                                        <li class="page-item @(i == currentPage ? "active" : "")">
                                            <button class="page-link" 
                                                    @onclick="@(async () => await ChangePage(i))">
                                                @i
                                            </button>
                                        </li>
                                    }
                                    
                                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                        <button class="page-link" 
                                                @onclick="@(async () => await ChangePage(currentPage + 1))"
                                                disabled="@(currentPage == totalPages)">
                                            Next
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                        }
                    }
                    else if (!isSearching)
                    {
                        <div class="text-center text-muted py-4">
                            <i class="oi oi-folder display-4"></i>
                            <p class="mt-3">No portfolios found</p>
                            <small>Create your first portfolio to get started</small>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsSaving { get; set; }
    [Parameter] public List<PortfolioAsset> PortfolioAssets { get; set; } = new();
    [Parameter] public EventCallback<Portfolio> OnPortfolioLoaded { get; set; }
    [Parameter] public EventCallback OnPortfolioSaved { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private PortfolioSaveRequest saveRequest = new();
    private List<Portfolio> portfolios = new();
    private string searchQuery = "";
    private bool isProcessing = false;
    private bool isSearching = false;
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        if (!IsSaving)
        {
            await LoadPortfolios();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && !IsSaving)
        {
            await LoadPortfolios();
        }
    }

    private async Task SavePortfolio()
    {
        try
        {
            isProcessing = true;
            saveRequest.Assets = PortfolioAssets;

            var response = await PortfolioService.SavePortfolioAsync(saveRequest);
            
            if (response?.IsSuccess == true && response.Data != null)
            {
                await OnPortfolioSaved.InvokeAsync();
                Close();
            }
            else
            {
                // Handle error
                Logger.LogError("Failed to save portfolio: {Error}", response?.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving portfolio");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task LoadPortfolios()
    {
        try
        {
            isSearching = true;
            
            var request = new PortfolioListRequest
            {
                SearchQuery = searchQuery,
                Page = currentPage,
                PageSize = pageSize,
                SortBy = "ModifiedDate",
                SortDescending = true
            };

            var response = await PortfolioService.ListPortfoliosAsync(request);
            
            if (response?.IsSuccess == true && response.Data != null)
            {
                portfolios = response.Data.Portfolios;
                totalPages = response.Data.TotalPages;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading portfolios");
        }
        finally
        {
            isSearching = false;
        }
    }

    private async Task SearchPortfolios()
    {
        currentPage = 1;
        await LoadPortfolios();
    }

    private async Task ChangePage(int page)
    {
        currentPage = page;
        await LoadPortfolios();
    }

    private async Task LoadPortfolio(Portfolio portfolio)
    {
        try
        {
            isProcessing = true;
            await OnPortfolioLoaded.InvokeAsync(portfolio);
            Close();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading portfolio");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DeletePortfolio(Portfolio portfolio)
    {
        try
        {
            isProcessing = true;
            
            var response = await PortfolioService.DeletePortfolioAsync(portfolio.Id);
            
            if (response?.IsSuccess == true)
            {
                await LoadPortfolios();
            }
            else
            {
                Logger.LogError("Failed to delete portfolio: {Error}", response?.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting portfolio");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void Close()
    {
        OnClose.InvokeAsync();
    }
}
